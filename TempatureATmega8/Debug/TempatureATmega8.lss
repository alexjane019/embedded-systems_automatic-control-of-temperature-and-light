
TempatureATmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000458  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000241  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fe  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001fb  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a2  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	88 c0       	rjmp	.+272    	; 0x12a <__vector_12>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	ce d0       	rcall	.+412    	; 0x1e0 <main>
  44:	39 c2       	rjmp	.+1138   	; 0x4b8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <SendCommand>:
	}
}


void SendCommand(char cmd){
	PORTD&=~(1<<RS);
  48:	95 98       	cbi	0x12, 5	; 18
	PORTD&=~(1<<RW);
  4a:	96 98       	cbi	0x12, 6	; 18
	PORTB=cmd;
  4c:	88 bb       	out	0x18, r24	; 24
	PORTD|=1<<E;
  4e:	97 9a       	sbi	0x12, 7	; 18
	PORTD&=~(1<<E);
  50:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  52:	83 ef       	ldi	r24, 0xF3	; 243
  54:	91 e0       	ldi	r25, 0x01	; 1
  56:	01 97       	sbiw	r24, 0x01	; 1
  58:	f1 f7       	brne	.-4      	; 0x56 <SendCommand+0xe>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <SendCommand+0x14>
  5c:	00 00       	nop
  5e:	08 95       	ret

00000060 <SendData>:
	_delay_ms(2);
}
void SendData(char Data){
	PORTD|=(1<<RS);
  60:	95 9a       	sbi	0x12, 5	; 18
	PORTD&=~(1<<RW);
  62:	96 98       	cbi	0x12, 6	; 18
	PORTB=Data;
  64:	88 bb       	out	0x18, r24	; 24
	PORTD|=1<<E;
  66:	97 9a       	sbi	0x12, 7	; 18
	PORTD&=~(1<<E);
  68:	97 98       	cbi	0x12, 7	; 18
  6a:	83 ef       	ldi	r24, 0xF3	; 243
  6c:	91 e0       	ldi	r25, 0x01	; 1
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <SendData+0xe>
  72:	00 c0       	rjmp	.+0      	; 0x74 <SendData+0x14>
  74:	00 00       	nop
  76:	08 95       	ret

00000078 <initTempature>:
	_delay_ms(2);
}

void initTempature(void){
	DDRC = 0;
  78:	14 ba       	out	0x14, r1	; 20
	ADCSRA = 0x87;
  7a:	87 e8       	ldi	r24, 0x87	; 135
  7c:	86 b9       	out	0x06, r24	; 6
	ADMUX=0xc0; //right justify ; 2.25 v
  7e:	80 ec       	ldi	r24, 0xC0	; 192
  80:	87 b9       	out	0x07, r24	; 7
  82:	08 95       	ret

00000084 <dispalyTempatuareLcd>:
}

void dispalyTempatuareLcd(unsigned char data)
{
  84:	cf 92       	push	r12
  86:	df 92       	push	r13
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
	double d= data;
  94:	68 2f       	mov	r22, r24
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	f5 d0       	rcall	.+490    	; 0x288 <__floatunsisf>
	d/=4;
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	40 e8       	ldi	r20, 0x80	; 128
  a4:	5e e3       	ldi	r21, 0x3E	; 62
  a6:	56 d1       	rcall	.+684    	; 0x354 <__mulsf3>
  a8:	6b 01       	movw	r12, r22
  aa:	7c 01       	movw	r14, r24
	t[0] = ((int)d/10)+0x30;
  ac:	bc d0       	rcall	.+376    	; 0x226 <__fixsfsi>
  ae:	c3 e6       	ldi	r28, 0x63	; 99
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	0a e0       	ldi	r16, 0x0A	; 10
  b4:	10 e0       	ldi	r17, 0x00	; 0
  b6:	cb 01       	movw	r24, r22
  b8:	b8 01       	movw	r22, r16
  ba:	d7 d1       	rcall	.+942    	; 0x46a <__divmodhi4>
  bc:	60 5d       	subi	r22, 0xD0	; 208
  be:	68 83       	st	Y, r22
	t[1] = ((int)d % 10)+0x30;
  c0:	80 5d       	subi	r24, 0xD0	; 208
  c2:	89 83       	std	Y+1, r24	; 0x01
	t[2] = '.';
  c4:	8e e2       	ldi	r24, 0x2E	; 46
  c6:	8a 83       	std	Y+2, r24	; 0x02
	t[3] = ((int)(d*10) % 10)+0x30;
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	40 e2       	ldi	r20, 0x20	; 32
  ce:	51 e4       	ldi	r21, 0x41	; 65
  d0:	c7 01       	movw	r24, r14
  d2:	b6 01       	movw	r22, r12
  d4:	3f d1       	rcall	.+638    	; 0x354 <__mulsf3>
  d6:	a7 d0       	rcall	.+334    	; 0x226 <__fixsfsi>
  d8:	cb 01       	movw	r24, r22
  da:	b8 01       	movw	r22, r16
  dc:	c6 d1       	rcall	.+908    	; 0x46a <__divmodhi4>
  de:	80 5d       	subi	r24, 0xD0	; 208
  e0:	8b 83       	std	Y+3, r24	; 0x03
	t[4] = ((int)(d* 100) % 10)+0x30;
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	48 ec       	ldi	r20, 0xC8	; 200
  e8:	52 e4       	ldi	r21, 0x42	; 66
  ea:	c7 01       	movw	r24, r14
  ec:	b6 01       	movw	r22, r12
  ee:	32 d1       	rcall	.+612    	; 0x354 <__mulsf3>
  f0:	9a d0       	rcall	.+308    	; 0x226 <__fixsfsi>
  f2:	cb 01       	movw	r24, r22
  f4:	b8 01       	movw	r22, r16
  f6:	b9 d1       	rcall	.+882    	; 0x46a <__divmodhi4>
  f8:	80 5d       	subi	r24, 0xD0	; 208
  fa:	8c 83       	std	Y+4, r24	; 0x04
  fc:	08 e6       	ldi	r16, 0x68	; 104
  fe:	10 e0       	ldi	r17, 0x00	; 0
	for(int a=0;a<5;a++)
		SendData(t[a]);
 100:	89 91       	ld	r24, Y+
 102:	ae df       	rcall	.-164    	; 0x60 <SendData>
	t[0] = ((int)d/10)+0x30;
	t[1] = ((int)d % 10)+0x30;
	t[2] = '.';
	t[3] = ((int)(d*10) % 10)+0x30;
	t[4] = ((int)(d* 100) % 10)+0x30;
	for(int a=0;a<5;a++)
 104:	c0 17       	cp	r28, r16
 106:	d1 07       	cpc	r29, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <dispalyTempatuareLcd+0x7c>
		SendData(t[a]);

	flag = 0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	char c [] = "'C";
	SendData(c[0]);
 110:	87 e2       	ldi	r24, 0x27	; 39
 112:	a6 df       	rcall	.-180    	; 0x60 <SendData>
	SendData(c[1]);	
 114:	83 e4       	ldi	r24, 0x43	; 67
 116:	a4 df       	rcall	.-184    	; 0x60 <SendData>

}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	ef 90       	pop	r14
 124:	df 90       	pop	r13
 126:	cf 90       	pop	r12
 128:	08 95       	ret

0000012a <__vector_12>:
#define E 7

char t[5];
int i=0;
unsigned char flag = 0x00;
ISR(USART_UDRE_vect){
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	
	if (i<5 && flag)
 14c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 150:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <i+0x1>
 154:	85 30       	cpi	r24, 0x05	; 5
 156:	91 05       	cpc	r25, r1
 158:	8c f4       	brge	.+34     	; 0x17c <__vector_12+0x52>
 15a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 15e:	22 23       	and	r18, r18
 160:	69 f0       	breq	.+26     	; 0x17c <__vector_12+0x52>
	{
		UDR = t[i++];
 162:	9c 01       	movw	r18, r24
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <i+0x1>
 16c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <i>
 170:	fc 01       	movw	r30, r24
 172:	ed 59       	subi	r30, 0x9D	; 157
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	80 81       	ld	r24, Z
 178:	8c b9       	out	0x0c, r24	; 12
 17a:	21 c0       	rjmp	.+66     	; 0x1be <__vector_12+0x94>
		//_delay_ms(500);
			
	}else if(i == 5){
 17c:	05 97       	sbiw	r24, 0x05	; 5
 17e:	f9 f4       	brne	.+62     	; 0x1be <__vector_12+0x94>
		flag = 0x00;
 180:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		i=0;
 184:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <i+0x1>
 188:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
		ADCSRA |= (1<<ADSC);
 18c:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA&(1<<ADIF)) == 0);
 18e:	34 9b       	sbis	0x06, 4	; 6
 190:	fe cf       	rjmp	.-4      	; 0x18e <__vector_12+0x64>
		SendCommand(0x38);  //initialization
 192:	88 e3       	ldi	r24, 0x38	; 56
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	58 df       	rcall	.-336    	; 0x48 <SendCommand>
		SendCommand(0x0e);
 198:	8e e0       	ldi	r24, 0x0E	; 14
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	55 df       	rcall	.-342    	; 0x48 <SendCommand>
		SendCommand(0x01);  //clear LCD
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	52 df       	rcall	.-348    	; 0x48 <SendCommand>
		unsigned char _adcl = ADCL;
 1a4:	84 b1       	in	r24, 0x04	; 4
		unsigned char _adch = ADCH;
 1a6:	95 b1       	in	r25, 0x05	; 5
		dispalyTempatuareLcd(_adcl);
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	6c df       	rcall	.-296    	; 0x84 <dispalyTempatuareLcd>
 1ac:	2f e3       	ldi	r18, 0x3F	; 63
 1ae:	8d e0       	ldi	r24, 0x0D	; 13
 1b0:	93 e0       	ldi	r25, 0x03	; 3
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <__vector_12+0x88>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <__vector_12+0x92>
 1bc:	00 00       	nop
		_delay_ms(1000);
		
			
	}
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <main>:

main(){
	unsigned char i;
	char msg[]="This is a test_123456789";
	
	DDRB=0xff;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	87 bb       	out	0x17, r24	; 23
	DDRD=0xf0;
 1e4:	80 ef       	ldi	r24, 0xF0	; 240
 1e6:	81 bb       	out	0x11, r24	; 17
	initTempature();
 1e8:	47 df       	rcall	.-370    	; 0x78 <initTempature>
	ADCSRA |= (1<<ADSC);
 1ea:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF)) == 0);
 1ec:	34 9b       	sbis	0x06, 4	; 6
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <main+0xc>
	SendCommand(0x38);  //initialization
 1f0:	88 e3       	ldi	r24, 0x38	; 56
 1f2:	2a df       	rcall	.-428    	; 0x48 <SendCommand>
	SendCommand(0x0e);
 1f4:	8e e0       	ldi	r24, 0x0E	; 14
 1f6:	28 df       	rcall	.-432    	; 0x48 <SendCommand>
	SendCommand(0x01);  //clear LCD
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	26 df       	rcall	.-436    	; 0x48 <SendCommand>
	unsigned char _adcl = ADCL;
 1fc:	84 b1       	in	r24, 0x04	; 4
	unsigned char _adch = ADCH;
 1fe:	95 b1       	in	r25, 0x05	; 5
	dispalyTempatuareLcd(_adcl);
 200:	41 df       	rcall	.-382    	; 0x84 <dispalyTempatuareLcd>
 202:	2f e3       	ldi	r18, 0x3F	; 63
 204:	8d e0       	ldi	r24, 0x0D	; 13
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x28>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x32>
 212:	00 00       	nop
	_delay_ms(1000);
	
	UCSRB = (1<<TXEN) | (1<<UDRIE);
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ1) | (1<<UCSZ0) | (1<<URSEL);
 218:	86 e8       	ldi	r24, 0x86	; 134
 21a:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00;
 21c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x33;
 21e:	83 e3       	ldi	r24, 0x33	; 51
 220:	89 b9       	out	0x09, r24	; 9
	sei();
 222:	78 94       	sei

	while(1);
 224:	ff cf       	rjmp	.-2      	; 0x224 <main+0x44>

00000226 <__fixsfsi>:
 226:	04 d0       	rcall	.+8      	; 0x230 <__fixunssfsi>
 228:	68 94       	set
 22a:	b1 11       	cpse	r27, r1
 22c:	8d c0       	rjmp	.+282    	; 0x348 <__fp_szero>
 22e:	08 95       	ret

00000230 <__fixunssfsi>:
 230:	70 d0       	rcall	.+224    	; 0x312 <__fp_splitA>
 232:	88 f0       	brcs	.+34     	; 0x256 <__fixunssfsi+0x26>
 234:	9f 57       	subi	r25, 0x7F	; 127
 236:	90 f0       	brcs	.+36     	; 0x25c <__fixunssfsi+0x2c>
 238:	b9 2f       	mov	r27, r25
 23a:	99 27       	eor	r25, r25
 23c:	b7 51       	subi	r27, 0x17	; 23
 23e:	a0 f0       	brcs	.+40     	; 0x268 <__fixunssfsi+0x38>
 240:	d1 f0       	breq	.+52     	; 0x276 <__fixunssfsi+0x46>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	88 1f       	adc	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	1a f0       	brmi	.+6      	; 0x252 <__fixunssfsi+0x22>
 24c:	ba 95       	dec	r27
 24e:	c9 f7       	brne	.-14     	; 0x242 <__fixunssfsi+0x12>
 250:	12 c0       	rjmp	.+36     	; 0x276 <__fixunssfsi+0x46>
 252:	b1 30       	cpi	r27, 0x01	; 1
 254:	81 f0       	breq	.+32     	; 0x276 <__fixunssfsi+0x46>
 256:	77 d0       	rcall	.+238    	; 0x346 <__fp_zero>
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	08 95       	ret
 25c:	74 c0       	rjmp	.+232    	; 0x346 <__fp_zero>
 25e:	67 2f       	mov	r22, r23
 260:	78 2f       	mov	r23, r24
 262:	88 27       	eor	r24, r24
 264:	b8 5f       	subi	r27, 0xF8	; 248
 266:	39 f0       	breq	.+14     	; 0x276 <__fixunssfsi+0x46>
 268:	b9 3f       	cpi	r27, 0xF9	; 249
 26a:	cc f3       	brlt	.-14     	; 0x25e <__fixunssfsi+0x2e>
 26c:	86 95       	lsr	r24
 26e:	77 95       	ror	r23
 270:	67 95       	ror	r22
 272:	b3 95       	inc	r27
 274:	d9 f7       	brne	.-10     	; 0x26c <__fixunssfsi+0x3c>
 276:	3e f4       	brtc	.+14     	; 0x286 <__fixunssfsi+0x56>
 278:	90 95       	com	r25
 27a:	80 95       	com	r24
 27c:	70 95       	com	r23
 27e:	61 95       	neg	r22
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	8f 4f       	sbci	r24, 0xFF	; 255
 284:	9f 4f       	sbci	r25, 0xFF	; 255
 286:	08 95       	ret

00000288 <__floatunsisf>:
 288:	e8 94       	clt
 28a:	09 c0       	rjmp	.+18     	; 0x29e <__floatsisf+0x12>

0000028c <__floatsisf>:
 28c:	97 fb       	bst	r25, 7
 28e:	3e f4       	brtc	.+14     	; 0x29e <__floatsisf+0x12>
 290:	90 95       	com	r25
 292:	80 95       	com	r24
 294:	70 95       	com	r23
 296:	61 95       	neg	r22
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	8f 4f       	sbci	r24, 0xFF	; 255
 29c:	9f 4f       	sbci	r25, 0xFF	; 255
 29e:	99 23       	and	r25, r25
 2a0:	a9 f0       	breq	.+42     	; 0x2cc <__floatsisf+0x40>
 2a2:	f9 2f       	mov	r31, r25
 2a4:	96 e9       	ldi	r25, 0x96	; 150
 2a6:	bb 27       	eor	r27, r27
 2a8:	93 95       	inc	r25
 2aa:	f6 95       	lsr	r31
 2ac:	87 95       	ror	r24
 2ae:	77 95       	ror	r23
 2b0:	67 95       	ror	r22
 2b2:	b7 95       	ror	r27
 2b4:	f1 11       	cpse	r31, r1
 2b6:	f8 cf       	rjmp	.-16     	; 0x2a8 <__floatsisf+0x1c>
 2b8:	fa f4       	brpl	.+62     	; 0x2f8 <__floatsisf+0x6c>
 2ba:	bb 0f       	add	r27, r27
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <__floatsisf+0x36>
 2be:	60 ff       	sbrs	r22, 0
 2c0:	1b c0       	rjmp	.+54     	; 0x2f8 <__floatsisf+0x6c>
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	8f 4f       	sbci	r24, 0xFF	; 255
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	16 c0       	rjmp	.+44     	; 0x2f8 <__floatsisf+0x6c>
 2cc:	88 23       	and	r24, r24
 2ce:	11 f0       	breq	.+4      	; 0x2d4 <__floatsisf+0x48>
 2d0:	96 e9       	ldi	r25, 0x96	; 150
 2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <__floatsisf+0x6a>
 2d4:	77 23       	and	r23, r23
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <__floatsisf+0x54>
 2d8:	9e e8       	ldi	r25, 0x8E	; 142
 2da:	87 2f       	mov	r24, r23
 2dc:	76 2f       	mov	r23, r22
 2de:	05 c0       	rjmp	.+10     	; 0x2ea <__floatsisf+0x5e>
 2e0:	66 23       	and	r22, r22
 2e2:	71 f0       	breq	.+28     	; 0x300 <__floatsisf+0x74>
 2e4:	96 e8       	ldi	r25, 0x86	; 134
 2e6:	86 2f       	mov	r24, r22
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	2a f0       	brmi	.+10     	; 0x2f8 <__floatsisf+0x6c>
 2ee:	9a 95       	dec	r25
 2f0:	66 0f       	add	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	88 1f       	adc	r24, r24
 2f6:	da f7       	brpl	.-10     	; 0x2ee <__floatsisf+0x62>
 2f8:	88 0f       	add	r24, r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	97 f9       	bld	r25, 7
 300:	08 95       	ret

00000302 <__fp_split3>:
 302:	57 fd       	sbrc	r21, 7
 304:	90 58       	subi	r25, 0x80	; 128
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
 30a:	59 f0       	breq	.+22     	; 0x322 <__fp_splitA+0x10>
 30c:	5f 3f       	cpi	r21, 0xFF	; 255
 30e:	71 f0       	breq	.+28     	; 0x32c <__fp_splitA+0x1a>
 310:	47 95       	ror	r20

00000312 <__fp_splitA>:
 312:	88 0f       	add	r24, r24
 314:	97 fb       	bst	r25, 7
 316:	99 1f       	adc	r25, r25
 318:	61 f0       	breq	.+24     	; 0x332 <__fp_splitA+0x20>
 31a:	9f 3f       	cpi	r25, 0xFF	; 255
 31c:	79 f0       	breq	.+30     	; 0x33c <__fp_splitA+0x2a>
 31e:	87 95       	ror	r24
 320:	08 95       	ret
 322:	12 16       	cp	r1, r18
 324:	13 06       	cpc	r1, r19
 326:	14 06       	cpc	r1, r20
 328:	55 1f       	adc	r21, r21
 32a:	f2 cf       	rjmp	.-28     	; 0x310 <__fp_split3+0xe>
 32c:	46 95       	lsr	r20
 32e:	f1 df       	rcall	.-30     	; 0x312 <__fp_splitA>
 330:	08 c0       	rjmp	.+16     	; 0x342 <__fp_splitA+0x30>
 332:	16 16       	cp	r1, r22
 334:	17 06       	cpc	r1, r23
 336:	18 06       	cpc	r1, r24
 338:	99 1f       	adc	r25, r25
 33a:	f1 cf       	rjmp	.-30     	; 0x31e <__fp_splitA+0xc>
 33c:	86 95       	lsr	r24
 33e:	71 05       	cpc	r23, r1
 340:	61 05       	cpc	r22, r1
 342:	08 94       	sec
 344:	08 95       	ret

00000346 <__fp_zero>:
 346:	e8 94       	clt

00000348 <__fp_szero>:
 348:	bb 27       	eor	r27, r27
 34a:	66 27       	eor	r22, r22
 34c:	77 27       	eor	r23, r23
 34e:	cb 01       	movw	r24, r22
 350:	97 f9       	bld	r25, 7
 352:	08 95       	ret

00000354 <__mulsf3>:
 354:	0b d0       	rcall	.+22     	; 0x36c <__mulsf3x>
 356:	78 c0       	rjmp	.+240    	; 0x448 <__fp_round>
 358:	69 d0       	rcall	.+210    	; 0x42c <__fp_pscA>
 35a:	28 f0       	brcs	.+10     	; 0x366 <__mulsf3+0x12>
 35c:	6e d0       	rcall	.+220    	; 0x43a <__fp_pscB>
 35e:	18 f0       	brcs	.+6      	; 0x366 <__mulsf3+0x12>
 360:	95 23       	and	r25, r21
 362:	09 f0       	breq	.+2      	; 0x366 <__mulsf3+0x12>
 364:	5a c0       	rjmp	.+180    	; 0x41a <__fp_inf>
 366:	5f c0       	rjmp	.+190    	; 0x426 <__fp_nan>
 368:	11 24       	eor	r1, r1
 36a:	ee cf       	rjmp	.-36     	; 0x348 <__fp_szero>

0000036c <__mulsf3x>:
 36c:	ca df       	rcall	.-108    	; 0x302 <__fp_split3>
 36e:	a0 f3       	brcs	.-24     	; 0x358 <__mulsf3+0x4>

00000370 <__mulsf3_pse>:
 370:	95 9f       	mul	r25, r21
 372:	d1 f3       	breq	.-12     	; 0x368 <__mulsf3+0x14>
 374:	95 0f       	add	r25, r21
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	55 1f       	adc	r21, r21
 37a:	62 9f       	mul	r22, r18
 37c:	f0 01       	movw	r30, r0
 37e:	72 9f       	mul	r23, r18
 380:	bb 27       	eor	r27, r27
 382:	f0 0d       	add	r31, r0
 384:	b1 1d       	adc	r27, r1
 386:	63 9f       	mul	r22, r19
 388:	aa 27       	eor	r26, r26
 38a:	f0 0d       	add	r31, r0
 38c:	b1 1d       	adc	r27, r1
 38e:	aa 1f       	adc	r26, r26
 390:	64 9f       	mul	r22, r20
 392:	66 27       	eor	r22, r22
 394:	b0 0d       	add	r27, r0
 396:	a1 1d       	adc	r26, r1
 398:	66 1f       	adc	r22, r22
 39a:	82 9f       	mul	r24, r18
 39c:	22 27       	eor	r18, r18
 39e:	b0 0d       	add	r27, r0
 3a0:	a1 1d       	adc	r26, r1
 3a2:	62 1f       	adc	r22, r18
 3a4:	73 9f       	mul	r23, r19
 3a6:	b0 0d       	add	r27, r0
 3a8:	a1 1d       	adc	r26, r1
 3aa:	62 1f       	adc	r22, r18
 3ac:	83 9f       	mul	r24, r19
 3ae:	a0 0d       	add	r26, r0
 3b0:	61 1d       	adc	r22, r1
 3b2:	22 1f       	adc	r18, r18
 3b4:	74 9f       	mul	r23, r20
 3b6:	33 27       	eor	r19, r19
 3b8:	a0 0d       	add	r26, r0
 3ba:	61 1d       	adc	r22, r1
 3bc:	23 1f       	adc	r18, r19
 3be:	84 9f       	mul	r24, r20
 3c0:	60 0d       	add	r22, r0
 3c2:	21 1d       	adc	r18, r1
 3c4:	82 2f       	mov	r24, r18
 3c6:	76 2f       	mov	r23, r22
 3c8:	6a 2f       	mov	r22, r26
 3ca:	11 24       	eor	r1, r1
 3cc:	9f 57       	subi	r25, 0x7F	; 127
 3ce:	50 40       	sbci	r21, 0x00	; 0
 3d0:	8a f0       	brmi	.+34     	; 0x3f4 <__mulsf3_pse+0x84>
 3d2:	e1 f0       	breq	.+56     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 3d4:	88 23       	and	r24, r24
 3d6:	4a f0       	brmi	.+18     	; 0x3ea <__mulsf3_pse+0x7a>
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	bb 1f       	adc	r27, r27
 3de:	66 1f       	adc	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	88 1f       	adc	r24, r24
 3e4:	91 50       	subi	r25, 0x01	; 1
 3e6:	50 40       	sbci	r21, 0x00	; 0
 3e8:	a9 f7       	brne	.-22     	; 0x3d4 <__mulsf3_pse+0x64>
 3ea:	9e 3f       	cpi	r25, 0xFE	; 254
 3ec:	51 05       	cpc	r21, r1
 3ee:	70 f0       	brcs	.+28     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <__fp_inf>
 3f2:	aa cf       	rjmp	.-172    	; 0x348 <__fp_szero>
 3f4:	5f 3f       	cpi	r21, 0xFF	; 255
 3f6:	ec f3       	brlt	.-6      	; 0x3f2 <__mulsf3_pse+0x82>
 3f8:	98 3e       	cpi	r25, 0xE8	; 232
 3fa:	dc f3       	brlt	.-10     	; 0x3f2 <__mulsf3_pse+0x82>
 3fc:	86 95       	lsr	r24
 3fe:	77 95       	ror	r23
 400:	67 95       	ror	r22
 402:	b7 95       	ror	r27
 404:	f7 95       	ror	r31
 406:	e7 95       	ror	r30
 408:	9f 5f       	subi	r25, 0xFF	; 255
 40a:	c1 f7       	brne	.-16     	; 0x3fc <__mulsf3_pse+0x8c>
 40c:	fe 2b       	or	r31, r30
 40e:	88 0f       	add	r24, r24
 410:	91 1d       	adc	r25, r1
 412:	96 95       	lsr	r25
 414:	87 95       	ror	r24
 416:	97 f9       	bld	r25, 7
 418:	08 95       	ret

0000041a <__fp_inf>:
 41a:	97 f9       	bld	r25, 7
 41c:	9f 67       	ori	r25, 0x7F	; 127
 41e:	80 e8       	ldi	r24, 0x80	; 128
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	08 95       	ret

00000426 <__fp_nan>:
 426:	9f ef       	ldi	r25, 0xFF	; 255
 428:	80 ec       	ldi	r24, 0xC0	; 192
 42a:	08 95       	ret

0000042c <__fp_pscA>:
 42c:	00 24       	eor	r0, r0
 42e:	0a 94       	dec	r0
 430:	16 16       	cp	r1, r22
 432:	17 06       	cpc	r1, r23
 434:	18 06       	cpc	r1, r24
 436:	09 06       	cpc	r0, r25
 438:	08 95       	ret

0000043a <__fp_pscB>:
 43a:	00 24       	eor	r0, r0
 43c:	0a 94       	dec	r0
 43e:	12 16       	cp	r1, r18
 440:	13 06       	cpc	r1, r19
 442:	14 06       	cpc	r1, r20
 444:	05 06       	cpc	r0, r21
 446:	08 95       	ret

00000448 <__fp_round>:
 448:	09 2e       	mov	r0, r25
 44a:	03 94       	inc	r0
 44c:	00 0c       	add	r0, r0
 44e:	11 f4       	brne	.+4      	; 0x454 <__fp_round+0xc>
 450:	88 23       	and	r24, r24
 452:	52 f0       	brmi	.+20     	; 0x468 <__stack+0x9>
 454:	bb 0f       	add	r27, r27
 456:	40 f4       	brcc	.+16     	; 0x468 <__stack+0x9>
 458:	bf 2b       	or	r27, r31
 45a:	11 f4       	brne	.+4      	; 0x460 <__stack+0x1>
 45c:	60 ff       	sbrs	r22, 0
 45e:	04 c0       	rjmp	.+8      	; 0x468 <__stack+0x9>
 460:	6f 5f       	subi	r22, 0xFF	; 255
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__divmodhi4>:
 46a:	97 fb       	bst	r25, 7
 46c:	07 2e       	mov	r0, r23
 46e:	16 f4       	brtc	.+4      	; 0x474 <__divmodhi4+0xa>
 470:	00 94       	com	r0
 472:	06 d0       	rcall	.+12     	; 0x480 <__divmodhi4_neg1>
 474:	77 fd       	sbrc	r23, 7
 476:	08 d0       	rcall	.+16     	; 0x488 <__divmodhi4_neg2>
 478:	0b d0       	rcall	.+22     	; 0x490 <__udivmodhi4>
 47a:	07 fc       	sbrc	r0, 7
 47c:	05 d0       	rcall	.+10     	; 0x488 <__divmodhi4_neg2>
 47e:	3e f4       	brtc	.+14     	; 0x48e <__divmodhi4_exit>

00000480 <__divmodhi4_neg1>:
 480:	90 95       	com	r25
 482:	81 95       	neg	r24
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	08 95       	ret

00000488 <__divmodhi4_neg2>:
 488:	70 95       	com	r23
 48a:	61 95       	neg	r22
 48c:	7f 4f       	sbci	r23, 0xFF	; 255

0000048e <__divmodhi4_exit>:
 48e:	08 95       	ret

00000490 <__udivmodhi4>:
 490:	aa 1b       	sub	r26, r26
 492:	bb 1b       	sub	r27, r27
 494:	51 e1       	ldi	r21, 0x11	; 17
 496:	07 c0       	rjmp	.+14     	; 0x4a6 <__udivmodhi4_ep>

00000498 <__udivmodhi4_loop>:
 498:	aa 1f       	adc	r26, r26
 49a:	bb 1f       	adc	r27, r27
 49c:	a6 17       	cp	r26, r22
 49e:	b7 07       	cpc	r27, r23
 4a0:	10 f0       	brcs	.+4      	; 0x4a6 <__udivmodhi4_ep>
 4a2:	a6 1b       	sub	r26, r22
 4a4:	b7 0b       	sbc	r27, r23

000004a6 <__udivmodhi4_ep>:
 4a6:	88 1f       	adc	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	5a 95       	dec	r21
 4ac:	a9 f7       	brne	.-22     	; 0x498 <__udivmodhi4_loop>
 4ae:	80 95       	com	r24
 4b0:	90 95       	com	r25
 4b2:	bc 01       	movw	r22, r24
 4b4:	cd 01       	movw	r24, r26
 4b6:	08 95       	ret

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
